@page "/ViewTodos"
@using HttpClients.ClientInterfaces
@using HttpClients.Implementations
@using Shared
@using Shared.DTOs
@using UIComponents
@inject ITodoService todoService
@inject NavigationManager navMgr

<h3>ViewTodos</h3>

<div class="filter-bar">
    <div class="filters-container">
        <img src="icons/@(doShowFilters ? "clear_" : "")funnel.png" class="funnel" @onclick="@(() => doShowFilters = !doShowFilters)" alt="Funnel"/>
        @if (doShowFilters)
        {
        <div class="filter">
            <label>Username:</label>
            <input type="text" @bind="usernameFilter"/>
        </div>
        <div class="filter">
            <label>User id:</label>
            <input type="number" @bind="userIdFilter"/>
        </div>
        <div class="filter">
            <label>Is completed?</label>
            <select @bind="completedStatusFilter">
                <option value="all">All</option>
                <option value="true">Yes</option>
                <option value="false">No</option>
            </select>
        </div>
        <div class="filter">
            <label>Title contains:</label>
            <input type="text" @bind="titleContainsFilter"/>
        </div>
        }
    </div>
</div>

<div>
    <button @onclick="LoadTodos">Load</button>
</div>

@if (todos == null)
{
}
else if (!todos.Any())
{
<p>No Todos to display</p>
}
else
{
<table class="table">
    <thead>
    <tr>
        <th>Todo ID</th>
        <th>Owner</th>
        <th>Title</th>
        <th>Status</th>
        <th>Completed?</th>
        <th>Edit</th>
        <th>Delete?</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in todos)
    {
    <tr>
        <td>@item.Id</td>
        <td>@item.Owner.Username</td>
        <td>@item.Title</td>
        <td>@item.IsCompleted</td>
        <td>
            <FancyCheckBox IsCompleted="@item.IsCompleted" OnChange="@((value) => CompleteTodo(item, value))"/>
        </td>
        <td>
            <img src="icons/edit.gif" class="funnel" @onclick="@(() => navMgr.NavigateTo($"/EditTodo/{item.Id}"))"/>
        </td>
        <td>
            <label @onclick="@(() => RemoveTodo(item.Id))" style="cursor:pointer; color: red; font-weight: bold">
                &#x2717;
            </label>
        </td>
    </tr>
    }
    </tbody>
</table>
}
@if (!string.IsNullOrEmpty(msg))
{
<label style="color: red">@msg</label>
}

@code {
    private IEnumerable<Todo>? todos;
    private string msg = "";
    private bool doShowFilters = false;

    private string? usernameFilter;
    private int? userIdFilter;
    private string? completedStatusFilter;
    private string? titleContainsFilter;



    private async Task LoadTodos()
    {
        try
        {
            bool? completedFilterValue = null;
            if (!string.IsNullOrEmpty(completedStatusFilter) && !completedStatusFilter.Equals("all"))
            {
                completedFilterValue = bool.Parse(completedStatusFilter);
            }

            todos = await todoService.GetTodosAsync(usernameFilter, userIdFilter, completedFilterValue, titleContainsFilter);
        }

        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private async Task RemoveTodo(int todoId)
    {
        msg = "";
        try
        {
            await todoService.DeleteAsync(todoId);
        
            var list = new List<Todo>(todos!);
            list.RemoveAll(todo => todo.Id == todoId);
            todos = list.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task CompleteTodo (Todo item, bool status)
    {
        TodoUpdateDTO dto = new(item.Id)
        {
            IsCompleted = status
        };
    
        try
        {
            await todoService.UpdateAsync(dto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}